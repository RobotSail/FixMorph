[K	

####################################################################################################

	Crochet - Horizontal Code Edit Transfer
	Test conducted on: 03-Jan-2020 (19:27:36.917913)

####################################################################################################
[K
====================================================================================================

	Initializing project for Transfer
====================================================================================================

[K
	loading configuration
	__________________________________________________________________________________________

[K		reading configuration values
[K
	set environment
	__________________________________________________________________________________________

[K		setting environment values
[K
====================================================================================================

	Building Projects
====================================================================================================

[K
	building binaries
	__________________________________________________________________________________________

[K
		restoring projects
		------------------------------------------------------------------------------------------

[K		/opus/CVE-2017-0381-Android/opus-1.1.3/
[K		/opus/CVE-2017-0381-Android/opus-1.1.4/
[K		/opus/CVE-2017-0381-Android/Android-7.1/
[K		/opus/CVE-2017-0381-Android/Android-7.1-patch/
[K
		cleaning projects
		------------------------------------------------------------------------------------------

[K		/opus/CVE-2017-0381-Android/opus-1.1.3/
[K		/opus/CVE-2017-0381-Android/opus-1.1.4/
[K		/opus/CVE-2017-0381-Android/Android-7.1/
[K		/opus/CVE-2017-0381-Android/Android-7.1-patch/
[K
		configuring projects
		------------------------------------------------------------------------------------------

[K		/opus/CVE-2017-0381-Android/opus-1.1.3/
[K		/opus/CVE-2017-0381-Android/opus-1.1.4/
[K		/opus/CVE-2017-0381-Android/Android-7.1/
[K		/opus/CVE-2017-0381-Android/Android-7.1-patch/
[K
		building projects
		------------------------------------------------------------------------------------------

[K		/opus/CVE-2017-0381-Android/opus-1.1.3/
[K		/opus/CVE-2017-0381-Android/opus-1.1.4/
[K		/opus/CVE-2017-0381-Android/Android-7.1/
[K		/opus/CVE-2017-0381-Android/Android-7.1-patch/
[K
	Successful building binaries, after 289.33683586120605 seconds.
[K
====================================================================================================

	Analysing Changes
====================================================================================================

[K
	analysing source diff
	__________________________________________________________________________________________

[K		finding changed files...
[K
		analysing header files
		------------------------------------------------------------------------------------------

[K			extracting changed header files...
[K			header files:
[K				/opus/CVE-2017-0381-Android/opus-1.1.3/config.h
[K
		analysing C/CPP source files
		------------------------------------------------------------------------------------------

[K			extracting changed c/cpp files...
[K			source files:
[K				/opus/CVE-2017-0381-Android/opus-1.1.3/silk/NLSF_stabilize.c
[K
		analysing changed code segments
		------------------------------------------------------------------------------------------

[K			collecting diff info...
[K			/opus/CVE-2017-0381-Android/opus-1.1.3/:
[K				silk_NLSF_stabilize in Pa/silk/NLSF_stabilize.c
[K				silk_NLSF_stabilize 47-142[K[K			/opus/CVE-2017-0381-Android/opus-1.1.4/:
[K				silk_NLSF_stabilize in Pb/silk/NLSF_stabilize.c
[K				silk_NLSF_stabilize 47-142[K[K
	Successful analysing source diff, after 0.29569435119628906 seconds.
[K
	analysing ast diff
	__________________________________________________________________________________________

[K
		/opus/CVE-2017-0381-Android/opus-1.1.3/silk/NLSF_stabilize.c
		------------------------------------------------------------------------------------------

[K		generating AST script
[K		line number:133
[K			filtering AST script by merging and grouping
[K			merging AST script
[K
	Successful analysing ast diff, after 0.5798699855804443 seconds.
[K
====================================================================================================

	Clone Detection
====================================================================================================

[K
	generating vectors for target
	__________________________________________________________________________________________

[K
		Generating vector files for all functions in Target
		------------------------------------------------------------------------------------------

[K			generating vectors for *\.c files in Pc...
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/encode_frame_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/autocorr_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/noise_shape_analysis_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/schur64_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/burg_modified_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/find_LTP_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/k2a_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/find_pitch_lags_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/find_LPC_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/find_pred_coefs_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/apply_sine_window_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/residual_energy16_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/solve_LS_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/warped_autocorrelation_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/pitch_analysis_core_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/k2a_Q16_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/LTP_analysis_filter_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/regularize_correlations_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/corrMatrix_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/LTP_scale_ctrl_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/residual_energy_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/schur_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/prefilter_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/process_gains_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/silk/fixed/vector_ops_FIX.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/celt/arm/arm_celt_map.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/celt/arm/armcpu.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/celt/opus_custom_demo.c
[K				Failed parsing AST for file:
			/opus/CVE-2017-0381-Android/Android-7.1/doc/trivial_example.c
[K
	Successful generating vectors for target, after 47.54562067985535 seconds.
[K
	finding clones in target
	__________________________________________________________________________________________

[K
		Finding clone functions in Target
		------------------------------------------------------------------------------------------

[K		checking vectors for C files in Pa...
[K		checking vectors for C files in Pc...
[K		finding clones for edited functions:

[K			Finding match for silk_NLSF_stabilize in $Pa/silk/NLSF_stabilize.c:
[K			Function: silk_NLSF_stabilize in $Pc/silk/NLSF_stabilize.c
[K			Distance: 2.8090141902309704e-05

[K
	Successful finding clones in target, after 0.49727463722229004 seconds.
[K
====================================================================================================

	Generating GumTree script for patch
====================================================================================================

[K
	Starting generating script for C files...
	__________________________________________________________________________________________

[K	Generating edit script: NLSF_stabilize.c to NLSF_stabilize.c...
[K
	Successful generating script for C files, after 0.4492044448852539 seconds.
[K
====================================================================================================

	Variable Mapping
====================================================================================================

[K
	Variable mapping for C files
	__________________________________________________________________________________________

[K	Generating mapping: NLSF_stabilize.c to NLSF_stabilize.c...
[K
====================================================================================================

	Translate GumTree Script
====================================================================================================

[K
	Translating scripts for C files
	__________________________________________________________________________________________

[K	Generating JSON temp files for each pertinent file...
[K			Clang AST parse /opus/CVE-2017-0381-Android/opus-1.1.3/silk/NLSF_stabilize.c in Pa...
[K			Clang AST parse /opus/CVE-2017-0381-Android/opus-1.1.4/silk/NLSF_stabilize.c in Pb...
[K			Clang AST parse /opus/CVE-2017-0381-Android/Android-7.1/silk/NLSF_stabilize.c in Pc...
[K	Warning: Match for DeclRefExpr(1453)not found. Skipping DELETE instruction.
[K	Warning: Match for DeclRefExpr(1452)not found. Skipping DELETE instruction.
[K	Warning: Match for ArraySubscriptExpr(1451)not found. Skipping DELETE instruction.
[K	Warning: Match for IntegerLiteral(1450)not found. Skipping DELETE instruction.
[K	Warning: Match for DeclRefExpr(1449)not found. Skipping DELETE instruction.
[K	Warning: Match for BinaryOperator(1448)not found. Skipping DELETE instruction.
[K	Warning: Match for DeclRefExpr(1447)not found. Skipping DELETE instruction.
[K	Warning: Match for ArraySubscriptExpr(1446)not found. Skipping DELETE instruction.
[K	Warning: Match for BinaryOperator(1445)not found. Skipping DELETE instruction.
[K
====================================================================================================

	Applying transformation
====================================================================================================

[K
	Starting transplanting code...
	__________________________________________________________________________________________

[K
		/opus/CVE-2017-0381-Android/Android-7.1/silk/NLSF_stabilize.c
		------------------------------------------------------------------------------------------

[K	Original AST script
[K			AST Script:
[K				 Update CallExpr(1440) CallExpr(1440)
[K				 Insert Macro(1445) CallExpr(1440) 2
[K				 Insert Macro(1446) Macro(1445) 0
[K				 Delete BinaryOperator(1445)
[K				 Delete ArraySubscriptExpr(1446)
[K				 Delete DeclRefExpr(1447)
[K				 Delete BinaryOperator(1448)
[K				 Delete DeclRefExpr(1449)
[K				 Delete IntegerLiteral(1450)
[K				 Delete ArraySubscriptExpr(1451)
[K				 Delete DeclRefExpr(1452)
[K				 Delete DeclRefExpr(1453)
[K	Generated AST script
[K			AST Script:
[K				 Insert Macro(1445) into CallExpr(1331) at 2
[K				 Update CallExpr(1331) to CallExpr(1440)
[K				identifying missing function calls
[K				identifying missing macros
[K		extracting macro definitions from
		/opus/CVE-2017-0381-Android/Android-7.1-patch/silk/NLSF_stabilize.c
[K					extracting macro definitions
[K	Original Patch
[K		133c133
[K		<             NLSF_Q15[i] = silk_max_int( NLSF_Q15[i], NLSF_Q15[i-1] + NDeltaMin_Q15[i] );
[K		---
[K		>             NLSF_Q15[i] = silk_max_int( NLSF_Q15[i], silk_ADD_SAT16( NLSF_Q15[i-1], NDeltaMin_Q15[i] ) );
[K	Generated Patch
[K		1,142d0
[K		< /***********************************************************************
[K		< Copyright (c) 2006-2011, Skype Limited. All rights reserved.
[K		< Redistribution and use in source and binary forms, with or without
[K		< modification, are permitted provided that the following conditions
[K		< are met:
[K		< - Redistributions of source code must retain the above copyright notice,
[K		< this list of conditions and the following disclaimer.
[K		< - Redistributions in binary form must reproduce the above copyright
[K		< notice, this list of conditions and the following disclaimer in the
[K		< documentation and/or other materials provided with the distribution.
[K		< - Neither the name of Internet Society, IETF or IETF Trust, nor the
[K		< names of specific contributors, may be used to endorse or promote
[K		< products derived from this software without specific prior written
[K		< permission.
[K		< THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
[K		< AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
[K		< IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
[K		< ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
[K		< LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
[K		< CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
[K		< SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
[K		< INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
[K		< CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
[K		< ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
[K		< POSSIBILITY OF SUCH DAMAGE.
[K		< ***********************************************************************/
[K		<
[K		< #ifdef HAVE_CONFIG_H
[K		< #include "config.h"
[K		< #endif
[K		<
[K		< /* NLSF stabilizer:                                         */
[K		< /*                                                          */
[K		< /* - Moves NLSFs further apart if they are too close        */
[K		< /* - Moves NLSFs away from borders if they are too close    */
[K		< /* - High effort to achieve a modification with minimum     */
[K		< /*     Euclidean distance to input vector                   */
[K		< /* - Output are sorted NLSF coefficients                    */
[K		< /*                                                          */
[K		<
[K		< #include "SigProc_FIX.h"
[K		<
[K		< /* Constant Definitions */
[K		< #define MAX_LOOPS        20
[K		<
[K		< /* NLSF stabilizer, for a single input data vector */
[K		< void silk_NLSF_stabilize(
[K		<           opus_int16            *NLSF_Q15,          /* I/O   Unstable/stabilized normalized LSF vector in Q15 [L]       */
[K		<     const opus_int16            *NDeltaMin_Q15,     /* I     Min distance vector, NDeltaMin_Q15[L] must be >= 1 [L+1]   */
[K		<     const opus_int              L                   /* I     Number of NLSF parameters in the input vector              */
[K		< )
[K		< {
[K		<     opus_int   i, I=0, k, loops;
[K		<     opus_int16 center_freq_Q15;
[K		<     opus_int32 diff_Q15, min_diff_Q15, min_center_Q15, max_center_Q15;
[K		<
[K		<     /* This is necessary to ensure an output within range of a opus_int16 */
[K		<     silk_assert( NDeltaMin_Q15[L] >= 1 );
[K		<
[K		<     for( loops = 0; loops < MAX_LOOPS; loops++ ) {
[K		<         /**************************/
[K		<         /* Find smallest distance */
[K		<         /**************************/
[K		<         /* First element */
[K		<         min_diff_Q15 = NLSF_Q15[0] - NDeltaMin_Q15[0];
[K		<         I = 0;
[K		<         /* Middle elements */
[K		<         for( i = 1; i <= L-1; i++ ) {
[K		<             diff_Q15 = NLSF_Q15[i] - ( NLSF_Q15[i-1] + NDeltaMin_Q15[i] );
[K		<             if( diff_Q15 < min_diff_Q15 ) {
[K		<                 min_diff_Q15 = diff_Q15;
[K		<                 I = i;
[K		<             }
[K		<         }
[K		<         /* Last element */
[K		<         diff_Q15 = ( 1 << 15 ) - ( NLSF_Q15[L-1] + NDeltaMin_Q15[L] );
[K		<         if( diff_Q15 < min_diff_Q15 ) {
[K		<             min_diff_Q15 = diff_Q15;
[K		<             I = L;
[K		<         }
[K		<
[K		<         /***************************************************/
[K		<         /* Now check if the smallest distance non-negative */
[K		<         /***************************************************/
[K		<         if( min_diff_Q15 >= 0 ) {
[K		<             return;
[K		<         }
[K		<
[K		<         if( I == 0 ) {
[K		<             /* Move away from lower limit */
[K		<             NLSF_Q15[0] = NDeltaMin_Q15[0];
[K		<
[K		<         } else if( I == L) {
[K		<             /* Move away from higher limit */
[K		<             NLSF_Q15[L-1] = ( 1 << 15 ) - NDeltaMin_Q15[L];
[K		<
[K		<         } else {
[K		<             /* Find the lower extreme for the location of the current center frequency */
[K		<             min_center_Q15 = 0;
[K		<             for( k = 0; k < I; k++ ) {
[K		<                 min_center_Q15 += NDeltaMin_Q15[k];
[K		<             }
[K		<             min_center_Q15 += silk_RSHIFT( NDeltaMin_Q15[I], 1 );
[K		<
[K		<             /* Find the upper extreme for the location of the current center frequency */
[K		<             max_center_Q15 = 1 << 15;
[K		<             for( k = L; k > I; k-- ) {
[K		<                 max_center_Q15 -= NDeltaMin_Q15[k];
[K		<             }
[K		<             max_center_Q15 -= silk_RSHIFT( NDeltaMin_Q15[I], 1 );
[K		<
[K		<             /* Move apart, sorted by value, keeping the same center frequency */
[K		<             center_freq_Q15 = (opus_int16)silk_LIMIT_32( silk_RSHIFT_ROUND( (opus_int32)NLSF_Q15[I-1] + (opus_int32)NLSF_Q15[I], 1 ),
[K		<                 min_center_Q15, max_center_Q15 );
[K		<             NLSF_Q15[I-1] = center_freq_Q15 - silk_RSHIFT( NDeltaMin_Q15[I], 1 );
[K		<             NLSF_Q15[I] = NLSF_Q15[I-1] + NDeltaMin_Q15[I];
[K		<         }
[K		<     }
[K		<
[K		<     /* Safe and simple fall back method, which is less ideal than the above */
[K		<     if( loops == MAX_LOOPS )
[K		<     {
[K		<         /* Insertion sort (fast for already almost sorted arrays):   */
[K		<         /* Best case:  O(n)   for an already sorted array            */
[K		<         /* Worst case: O(n^2) for an inversely sorted array          */
[K		<         silk_insertion_sort_increasing_all_values_int16( &NLSF_Q15[0], L );
[K		<
[K		<         /* First NLSF should be no less than NDeltaMin[0] */
[K		<         NLSF_Q15[0] = silk_max_int( NLSF_Q15[0], NDeltaMin_Q15[0] );
[K		<
[K		<         /* Keep delta_min distance between the NLSFs */
[K		<         for( i = 1; i < L; i++ )
[K		<             NLSF_Q15[i] = silk_max_int( NLSF_Q15[i], silk_ADD_SAT16( NLSF_Q15[i-1], NDeltaMin_Q15[i] ) );
[K		<
[K		<         /* Last NLSF should be no higher than 1 - NDeltaMin[L] */
[K		<         NLSF_Q15[L-1] = silk_min_int( NLSF_Q15[L-1], (1<<15) - NDeltaMin_Q15[L] );
[K		<
[K		<         /* Keep NDeltaMin distance between the NLSFs */
[K		<         for( i = L-2; i >= 0; i-- )
[K		<             NLSF_Q15[i] = silk_min_int( NLSF_Q15[i], NLSF_Q15[i+1] - NDeltaMin_Q15[i+1] );
[K		<     }
[K		< }
[K
	Successful transformation
[K
	Successful transplanting code, after 2.0385167598724365 seconds.
[K
	Starting transplanting functions...
	__________________________________________________________________________________________

[K		-none-
[K
	Successful transplanting functions, after 0.0007500648498535156 seconds.
[K
	Starting transplanting data structures...
	__________________________________________________________________________________________

[K		-none-
[K
	Successful transplanting data structures, after 0.00042557716369628906 seconds.
[K
	Starting transplanting macros...
	__________________________________________________________________________________________

[K		-none-
[K
	Successful transplanting macros, after 0.00042939186096191406 seconds.
[K
	Starting transplanting header files...
	__________________________________________________________________________________________

[K		-none-
[K
	Successful transplanting header files, after 0.0004374980926513672 seconds.
[K
	Starting correcting syntax errors...
	__________________________________________________________________________________________

[K
		computing syntax errors
		------------------------------------------------------------------------------------------

[K
	Successful correcting syntax errors, after 0.0005772113800048828 seconds.
[K
====================================================================================================

	Patch Verification
====================================================================================================

[K
	verifying compilation...
	__________________________________________________________________________________________

[K
		building projects
		------------------------------------------------------------------------------------------

[K			/opus/CVE-2017-0381-Android/Android-7.1-patch/
[K	cd /opus/CVE-2017-0381-Android/Android-7.1-patch/;bear make CFLAGS='-g -O0 -static -DNDEBUG -fsanitize=' CXXFLAGS='-g -O0 -static -DNDEBUG -fsanitize=' > /crochet/logs/CVE-2017-0381-Android/log-make


[K	BUILD FAILED!!
Exit Code: 2
[K	Crash during verifying compilation, after 48.07127332687378 seconds.


[K	Error. Exiting...
[K	Unexpected error during verifying compilation.
